- IT vs 대학교
- IT 부트캠프 : 
1) 삼성사피
2) 코드스테이츠
3) 팀스파르타
4) 멋쟁이사자처럼

*백엔드 / 풀스택
1) 2가지 분야 확연 나누어질 듯
- 퍼블리셔 X
- 프론트엔드 전문가 (ui/ux 완벽한 전문성 -> node)
- 무조건 풀스택

> JAVA & Python & C 기반으로 하공 있는 풀스텍
- 태초 백엔드 시작 + 프론트엔드 마스터

> JS & Node & Flutter  기반으로 하고있는 풀스택 진영 (*풀스텍 인정 얼마 안됨)
- 마이너한 시장
- 스타트업 / 자본 X / 비즈니스 규모 X

-----------------------------------------------------------------------------------------------------------------------------------
node.js - run javascript everywhere
npm 자동으로 같이 설치

- node.js 전세계적으로 인기

1) node를 사용하려면 반드시 node를 활성화시켜줘야 함
- node
- .exit (노드 끄기)

2) npm: node package manager
> 웹 브라우저 바깥에서 js를 사용해서 무언가를 만들고자 하는데 혹시 js구현시 도움을 받을 수 있는 확장 프로그램들이 모여있는 곳
=> 구글 플레이스토어

3) node => server 구축 & 구현 & 활용
- express

4) express NPM 내 프레임워크를 활용 > 서버!! & git-hub

- 로컬 git
- git-hub 연동
- express

5) npm 사용하기위해서 초기화!!
> 현재 이프로젝트에서 어떤 패키지 매니저를 사용하고 있는지?
> 정보(* 프로젝트명 / 언어)
> npm init

- license : 
MIT: 누구나 자유롭게 가져다가 사용할 수 있도록 허용하는 라이센스 판단 / BSD: 자유롭게 가져다가 사용하는 것은 문제가 없으나 수정후 재배포 => 반드시 원작자 동의를 얻어야하는 라이센스 / GPL: 원칙적으로 수정 불가하나 동의를 얻는다면 허용(*기본적으로 패키지 매니저의 저작권으로 보장해주는 라이센스 개념)

* package.json => 설명서 => 직접적으로 필요한npm / 개발을 하는 엔지니어의 편의성을 위해서 필요한 npm

- babel.js : 구 문법을 신 문법으로 변형시켜줌 + 코드를 작성할 때 일일히 코드 기능 구현 정상 테스트를 하지 않아도 알아서 모니터링을 해서 노드에서 구현시켜줄 수 있도록 해주는 nodemon 사용

npm i nodemon --save-dev

*데이터 통신
Server(*항상 켜져있는 꺼지지 않는 창고 혹은 24시 편의점)
> Client 요청(request), 요구사항 귀기울이고 있음
> listening
> Node는 Js기반으로

 <-> client

사용자는 웹브라우저라는 매게체를 활용해서 특정 브랜드 및 서비스 제품의 데이터를 요청

웹 브라우저 > 사용자를 대신해서 서버에 요청 =클라이언트

request, response => 매게변수
req, res

서버를 구현할 떄에는 컨셉
-redux: 미들웨어 (*하드 vs 소프트)

1) client & request

2) 미들웨어 (*next())

3) 파이널웨어 (*출력)

*app.get() : client request 존재, 미들웨서, 파이널웨어
*app.use() : global 미들웨어 => 어떤 url에서든지간에 작동이 가능한 미들웨어
> 전역요소의 미들웨어를 만들어서 사용할 떄에는 반드시 get() 먼저 실행
> 로그인여부 체크 / 사용자 조건 체크
> 복수의 다양한 미들웨어를 동시에 실행
> 미들웨어 중에서 기존에 이미 만들어진 미들웨어를 가져다가 사용 (*미들웨어를 통해서 확인할 수 있는 client정보 워낙 다양)
>morgan


페이지 라우팅
- react 프로젝트 : todoList / 감정일기장
- 만들어내야할 페이지의 개수 x Rest ApI


*라우터 vs 컨트롤러

*export default VS export
1) 파일에서 출력가능한 파일 개수를 정의
2) export default: import해오는 파일에서 파일명 수정 가능
3) export: import 해오는 파일에서 절대 파일명 수정 불가
> import를 해오는 공간에서 중괄호로 감싸안아서 가져온다

Node.js 에서 페이지 Router는 url에 접속하기 위한 일종의 포탈

1. Server 구축
- listening
- 페이지 라우팅

2. Client 개념
- rquest

3. 글로벌 라우터, client 특정 request 요청 => 출력시켜주는 요소 컨트롤러(*특정 경로의 페이지에 도착했을 때 실생시킬 콜백 함수)

4. 사용자 || 제품 => 다양성 추구 => 무조건 동적 파라미터 경로
(* 정적 파라미터 경로)

5. 백엔드: 보안 / 사용자 데이터 탈취 / 의도적 사이트 작동하지 못하도록 데이터 과부하

pug > 서버로서의 역할을 하고 있는 express

> view Engine

분명히 루트폴더 > src > views 폴더 존재
그래서 템플릿 엔진 pug express 설정
pug파일을 활용 => 경로 불일치

서버에 process.cwd() => 현재 실제로 작업중이라고 인식하는 컴퓨터상에 루트폴더가 어디인지 확인 => 현재 가장 바깥에 있는 폴더를 작업을 위한 실제 루트폴더 인식

view engine의 실제 속성을 세팅 => set(views, 경로 설정)

1) pug를 통해서 반복적으로 복,붙 해야하는 긴 html을 보다 효율적으로 줄임
2) scss에서 변수 => include
3) patials => 공통적으로 사용될 html 저장 => 필요시 불러옴
4) 상속